@using PollaEngendrilClientHosted.Client.Services;
@using PollaEngendrilClientHosted.Client.State;
@using PollaEngendrilClientHosted.Shared.Models.ViewModel;
@inject IPredictionApiService predictionApiService
@inject UserState UserState

@if (ShowPredictions)
{
    <MudTable T="UserPredictionViewModel" Items="matchPredictions" Breakpoint="Breakpoint.None">
        <HeaderContent>
            <MudTh Width="15%">Usuario</MudTh>
            <MudTh Width="30%">Marcador Predicho</MudTh>
            <MudTh Width="15%">Puntos Obtenidos</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Usuario" Class="mud-col-md-4">@context.UserName</MudTd>
            <MudTd DataLabel="Marcador Predicho" Class="mud-col-md-4">@($"{context.HomeTeamPredictedScore} - {context.AwayTeamPredictedScore}")</MudTd>
            <MudTd DataLabel="Puntos Obtenidos" Class="mud-col-md-4">@context.PointsObtained</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<UserPredictionViewModel> matchPredictions;

    [Parameter]
    public int? MatchId { get; set; }

    [Parameter]
    public bool ShowPredictions { get; set; }

    [Parameter]
    public List<UserPredictionViewModel> AllPredictions { get; set; }

    private async Task LoadPredictionsForMatch()
    {
        if (AllPredictions is not null && MatchId.HasValue)
            matchPredictions = AllPredictions.Where(p => p.MatchId == MatchId).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPredictionsForMatch();
    }

}
