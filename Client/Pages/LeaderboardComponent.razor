@page "/Leaderboard"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PollaEngendrilClientHosted.Client.Services;
@using PollaEngendrilClientHosted.Shared.Models.ViewModel;

@inject IPredictionApiService predictionApiService

<PageTitle>Leaderboard</PageTitle>
<div class="content">
    <div class="matches">
        <h1 style="outline: none !important;">
            Tabla de Posiciones
        </h1>
    </div>
</div>

<AuthorizeView>
    <Authorized>
        @if (leaderboard != null)
        {
            <MudTable Items="@leaderboard" Hover="true" Breakpoint="Breakpoint.None" Loading="@_loading" LoadingProgressColor="Color.Info">
                <ColGroup>
                <col />
                <col Class="clm-row-small" />
                <col />
            </ColGroup>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh Class="clm-row-small">Usuario</MudTh>
                <MudTh>Puntos</MudTh>
            </HeaderContent>
            <RowTemplate Context="player">
                <MudTd>@player.Position</MudTd>
                <MudTd Class="clm-row-small">@player.Name</MudTd>
                <MudTd>@player.Score</MudTd>
            </RowTemplate>
            </MudTable>
        }
        else
        {
            <LoaderComponent />
        }
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login" class="login-logout">Log in</a>
    </NotAuthorized>
</AuthorizeView>


@code {
    private List<PlayerLeaderboardViewModel> leaderboard;
    private bool _loading;

    private async Task LoadLeaderboard()
    {
        leaderboard = await predictionApiService.GetLeaderboardAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadLeaderboard();
    }
}