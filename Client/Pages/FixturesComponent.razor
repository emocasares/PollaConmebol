@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@using PollaEngendrilClientHosted.Client.Services;
@using PollaEngendrilClientHosted.Client.State;
@using PollaEngendrilClientHosted.Shared.Models.DTO;
@using PollaEngendrilClientHosted.Shared.Models.ViewModel;
@using MudBlazor


@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFixturesApiService fixturesApiService
@inject IPredictionApiService predictionApiService
@inject IUsersApiService usersApiService
@inject UserState UserState
@inject ISnackbar Snackbar
@inject IWebAssemblyHostEnvironment Env
@inject IJSRuntime JSRuntime

<MudSnackbarProvider />
<MudContainer>
<AuthorizeView>
    <Authorized>
        <PageTitle>Pronósticos</PageTitle>
        <div class="content">
            <div class="matches">
                <h1 style="outline: none !important;">
                    Eliminatorias Sudamericanas Recuperadas
                </h1>
            </div>

            <div class="matches">
                <div class="totalPoints">Puntos
                    <div class="rcircle">
                        <div class="pointsObtained">@TotalPointsObtained</div>
                    </div>
                </div>

                <MudSwitch @bind-Checked="@hideOldMatches" Label="Ocultar partidos pasados" Color="Color.Info" />

            @if (fixtures != null)
            {
                @foreach (var fixture in fixtures)
                {
                    <div class="match @(fixture.DateTime?.Date < DateTime.Now.Date && hideOldMatches  ? "hide-match" : "")">
                        @if (fixture.PointsObtained.HasValue)
                        {
                            <div class="rcircle">
                                <div class="pointsObtained">@fixture?.PointsObtained</div>
                            </div>
                        }
                            <p>Fecha: @fixture.DateString</p>
                            <div class="predictions-content">
                            <div class="pronostico">
                            <div class="banderas">
                                <img src="@fixture.HomeTeamFlag" alt="Bandera de @fixture.HomeTeam" title="@fixture.HomeTeam">
                                <span class="country-name">@fixture.HomeTeam</span>
                            </div>

                            <div class="input-scores">
                            <input type="number" id='@($"homeScore{fixture.Id}")'
                                    placeholder="" 
                                    @bind="@fixture.HomeTeamPredictedScore"
                                    disabled="@IsInputDisabled(fixture)"
                                    class="@(fixture.IsHomeScoreInvalid ? "is-invalid" : "") @(fixture.MustShowSavedSuccesfully ? "green-border-success green-border" : "")"
                                    @onblur="async () => await ValidateAndSave(fixture)" />
                                <input type="number" id='@($"realHomeScore{fixture.Id}")' placeholder="X" value="@fixture.HomeTeamRealScore" disabled>
                            </div>
                            <div class="input-scores">
                            <input type="number" id='@($"awayScore{fixture.Id}")'
                                    placeholder=""
                                    @bind="@fixture.AwayTeamPredictedScore"
                                    disabled="@IsInputDisabled(fixture)"
                                    class="@(fixture.IsAwayScoreInvalid ? "is-invalid" : "") @(fixture.MustShowSavedSuccesfully ? "green-border green-border-success" : "")"
                                    @onblur="async () => await ValidateAndSave(fixture)" />
                                <input type="number" id='@($"realAwayScore{fixture.Id}")' placeholder="X" value="@fixture.AwayTeamRealScore" disabled>
                            </div>

                            <div class="banderas">
                                <img src="@fixture.AwayTeamFlag" alt="Bandera de @fixture.AwayTeam" title="@fixture.AwayTeam">
                                <span class="country-name">@fixture.AwayTeam</span>
                            </div>

                            </div>

                            </div>

                            <MudToggleIconButton 
                                Color="Color.Primary" 
                                Icon="@Icons.Material.Filled.RemoveRedEye" 
                                ToggledIcon="@Icons.Material.Filled.RemoveRedEye" 
                                Title="Otros Pronósticos"
                                ToggledTitle="Ocultar"
                                ToggledChanged="newValue => ToggleExpansion(fixture, newValue)"
                                />

                                <PlayersPredictions MatchId="fixture.Id" ShowPredictions="fixture.ShowOtherPredictions" AllPredictions="allPredictions"/>

                            </div>
                }
            }
            else
            {
                <LoaderComponent />
            }
            </div>
        </div>
            
    </Authorized>
    <NotAuthorized>
        <NoAuthorizedComponent />
    </NotAuthorized>
</AuthorizeView>
</MudContainer>

