@using PollaEngendrilClientHosted.Client.Services;
@using PollaEngendrilClientHosted.Client.State;
@using PollaEngendrilClientHosted.Shared.Models.DTO;
@using PollaEngendrilClientHosted.Shared.Models.ViewModel;
@using MudBlazor

@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFixturesApiService fixturesApiService
@inject IPredictionApiService predictionApiService
@inject IUsersApiService usersApiService
@inject UserState UserState
@inject ISnackbar Snackbar

<MudSnackbarProvider />
<MudContainer>
<AuthorizeView>
    <Authorized>
        <PageTitle>Pronósticos</PageTitle>
        <div class="content">
            <div class="matches">
                <h1 style="outline: none !important;">
                    Eliminatorias Sudamericanas
                </h1>
            </div>

            <div class="matches">
            @if (fixtures != null)
            {
                @foreach (var fixture in fixtures)
                {
                    <div class="match">
                        <p>Fecha: @fixture.Date</p>
                            <!-- Pronóstico -->
                            <div class="pronostico">
                            <div class="banderas">
                            <img src="@fixture.HomeTeamFlag" alt="Bandera de @fixture.HomeTeam" title="@fixture.HomeTeam">
                            <span>@fixture.HomeTeam</span>
                            <img src="@fixture.AwayTeamFlag" alt="Bandera de @fixture.AwayTeam" title="@fixture.AwayTeam">
                            <span>@fixture.AwayTeam</span>
                            </div>
                            <input type="number" id='@($"homeScore{fixture.Id}")'
                               placeholder=""
                               @bind="@fixture.HomeTeamPredictedScore"
                               disabled="@IsInputDisabled(fixture, isHome: true)"
                                           class="@(fixture.IsHomeScoreInvalid ? "is-invalid" : "") @(fixture.MustShowSavedSuccesfully ? "green-border-success green-border" : "")"
                                    @onblur="async () => await ValidateAndSave(fixture)" />


                                    <input type="number" id='@($"awayScore{fixture.Id}")'
                                           placeholder=""
                                    @bind="@fixture.AwayTeamPredictedScore"
                                           disabled="@IsInputDisabled(fixture, isHome: false)"
                                           class="@(fixture.IsAwayScoreInvalid ? "is-invalid" : "") @(fixture.MustShowSavedSuccesfully ? "green-border green-border-success" : "")"
                                    @onblur="async () => await ValidateAndSave(fixture)" />

                            </div>
                            <!-- Resultado Real -->
                            <div class="real-score">
                                <input type="number" id="real-score1" placeholder="X" value="@fixture.HomeTeamRealScore" disabled>
                                <input type="number" id="real-score2" placeholder="X" value="@fixture.AwayTeamRealScore" disabled>
                            </div>

                            <MudToggleIconButton 
                                Color="Color.Primary" 
                                Icon="@Icons.Material.Filled.RemoveRedEye" 
                                ToggledIcon="@Icons.Material.Filled.RemoveRedEye" 
                                Title="Otros Pronósticos"
                                ToggledTitle="Ocultar"
                                ToggledChanged="newValue => ToggleExpansion(fixture, newValue)"
                                />

                                <OtherPlayersPredictions MatchId="fixture.Id" ShowPredictions="fixture.ShowOtherPredictions"/>

                        </div>
                    }
                }
                else
                {
                    <div style="display:flex; gap:10px; justify-content:center; align-items:center">
                        <span class="loader"></span>
                    </div>
                }
            </div>
        </div>
            
    </Authorized>
    <NotAuthorized>
        <NoAuthorizedComponent />
    </NotAuthorized>
</AuthorizeView>
</MudContainer>

